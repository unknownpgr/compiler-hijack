// Generated from Hijack.g4 by ANTLR 4.4
package generated;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class HijackLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__26=1, T__25=2, T__24=3, T__23=4, T__22=5, T__21=6, T__20=7, T__19=8, 
		T__18=9, T__17=10, T__16=11, T__15=12, T__14=13, T__13=14, T__12=15, T__11=16, 
		T__10=17, T__9=18, T__8=19, T__7=20, T__6=21, T__5=22, T__4=23, T__3=24, 
		T__2=25, T__1=26, T__0=27, STRING=28, ID=29, INT=30, FLOAT=31, WS=32, 
		COMMENT_LINE=33, COMMENT_BLOCK=34;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'"
	};
	public static final String[] ruleNames = {
		"T__26", "T__25", "T__24", "T__23", "T__22", "T__21", "T__20", "T__19", 
		"T__18", "T__17", "T__16", "T__15", "T__14", "T__13", "T__12", "T__11", 
		"T__10", "T__9", "T__8", "T__7", "T__6", "T__5", "T__4", "T__3", "T__2", 
		"T__1", "T__0", "STRING", "ID", "INT", "FLOAT", "WS", "COMMENT_LINE", 
		"COMMENT_BLOCK"
	};


	public HijackLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Hijack.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2$\u00e0\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4"+
		"\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3"+
		"\n\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20"+
		"\3\21\3\21\3\21\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\25\3\25\3\26\3\26"+
		"\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\32\3\32"+
		"\3\33\3\33\3\34\3\34\3\35\3\35\6\35\u0098\n\35\r\35\16\35\u0099\3\35\3"+
		"\35\3\36\5\36\u009f\n\36\3\36\7\36\u00a2\n\36\f\36\16\36\u00a5\13\36\3"+
		"\37\3\37\3\37\7\37\u00aa\n\37\f\37\16\37\u00ad\13\37\5\37\u00af\n\37\3"+
		" \3 \3 \7 \u00b4\n \f \16 \u00b7\13 \3 \3 \6 \u00bb\n \r \16 \u00bc\5"+
		" \u00bf\n \3!\6!\u00c2\n!\r!\16!\u00c3\3!\3!\3\"\3\"\3\"\3\"\7\"\u00cc"+
		"\n\"\f\"\16\"\u00cf\13\"\3\"\3\"\3#\3#\3#\3#\7#\u00d7\n#\f#\16#\u00da"+
		"\13#\3#\3#\3#\3#\3#\3\u00d8\2$\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13"+
		"\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61"+
		"\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$\3\2\n\4\2$$``\5\2C\\aac|\6\2"+
		"\62;C\\aac|\3\2\63;\3\2\62;\3\2\60\60\5\2\13\f\17\17\"\"\4\2\f\f\17\17"+
		"\u00e9\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2"+
		"\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3"+
		"\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2"+
		"\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2"+
		"/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2"+
		"\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\3"+
		"G\3\2\2\2\5I\3\2\2\2\7P\3\2\2\2\tV\3\2\2\2\13X\3\2\2\2\rZ\3\2\2\2\17_"+
		"\3\2\2\2\21a\3\2\2\2\23c\3\2\2\2\25f\3\2\2\2\27i\3\2\2\2\31m\3\2\2\2\33"+
		"o\3\2\2\2\35q\3\2\2\2\37s\3\2\2\2!u\3\2\2\2#x\3\2\2\2%z\3\2\2\2\'}\3\2"+
		"\2\2)\177\3\2\2\2+\u0081\3\2\2\2-\u0083\3\2\2\2/\u0088\3\2\2\2\61\u008a"+
		"\3\2\2\2\63\u008f\3\2\2\2\65\u0091\3\2\2\2\67\u0093\3\2\2\29\u0095\3\2"+
		"\2\2;\u009e\3\2\2\2=\u00ae\3\2\2\2?\u00be\3\2\2\2A\u00c1\3\2\2\2C\u00c7"+
		"\3\2\2\2E\u00d2\3\2\2\2GH\7\61\2\2H\4\3\2\2\2IJ\7t\2\2JK\7g\2\2KL\7v\2"+
		"\2LM\7w\2\2MN\7t\2\2NO\7p\2\2O\6\3\2\2\2PQ\7h\2\2QR\7n\2\2RS\7q\2\2ST"+
		"\7c\2\2TU\7v\2\2U\b\3\2\2\2VW\7=\2\2W\n\3\2\2\2XY\7}\2\2Y\f\3\2\2\2Z["+
		"\7x\2\2[\\\7q\2\2\\]\7k\2\2]^\7f\2\2^\16\3\2\2\2_`\7?\2\2`\20\3\2\2\2"+
		"ab\7\177\2\2b\22\3\2\2\2cd\7k\2\2de\7h\2\2e\24\3\2\2\2fg\7>\2\2gh\7?\2"+
		"\2h\26\3\2\2\2ij\7k\2\2jk\7p\2\2kl\7v\2\2l\30\3\2\2\2mn\7*\2\2n\32\3\2"+
		"\2\2op\7,\2\2p\34\3\2\2\2qr\7.\2\2r\36\3\2\2\2st\7\60\2\2t \3\2\2\2uv"+
		"\7@\2\2vw\7?\2\2w\"\3\2\2\2xy\7]\2\2y$\3\2\2\2z{\7?\2\2{|\7?\2\2|&\3\2"+
		"\2\2}~\7>\2\2~(\3\2\2\2\177\u0080\7_\2\2\u0080*\3\2\2\2\u0081\u0082\7"+
		"@\2\2\u0082,\3\2\2\2\u0083\u0084\7d\2\2\u0084\u0085\7q\2\2\u0085\u0086"+
		"\7q\2\2\u0086\u0087\7n\2\2\u0087.\3\2\2\2\u0088\u0089\7#\2\2\u0089\60"+
		"\3\2\2\2\u008a\u008b\7g\2\2\u008b\u008c\7n\2\2\u008c\u008d\7u\2\2\u008d"+
		"\u008e\7g\2\2\u008e\62\3\2\2\2\u008f\u0090\7+\2\2\u0090\64\3\2\2\2\u0091"+
		"\u0092\7-\2\2\u0092\66\3\2\2\2\u0093\u0094\7/\2\2\u00948\3\2\2\2\u0095"+
		"\u0097\7$\2\2\u0096\u0098\t\2\2\2\u0097\u0096\3\2\2\2\u0098\u0099\3\2"+
		"\2\2\u0099\u0097\3\2\2\2\u0099\u009a\3\2\2\2\u009a\u009b\3\2\2\2\u009b"+
		"\u009c\7$\2\2\u009c:\3\2\2\2\u009d\u009f\t\3\2\2\u009e\u009d\3\2\2\2\u009f"+
		"\u00a3\3\2\2\2\u00a0\u00a2\t\4\2\2\u00a1\u00a0\3\2\2\2\u00a2\u00a5\3\2"+
		"\2\2\u00a3\u00a1\3\2\2\2\u00a3\u00a4\3\2\2\2\u00a4<\3\2\2\2\u00a5\u00a3"+
		"\3\2\2\2\u00a6\u00af\7\62\2\2\u00a7\u00ab\t\5\2\2\u00a8\u00aa\t\6\2\2"+
		"\u00a9\u00a8\3\2\2\2\u00aa\u00ad\3\2\2\2\u00ab\u00a9\3\2\2\2\u00ab\u00ac"+
		"\3\2\2\2\u00ac\u00af\3\2\2\2\u00ad\u00ab\3\2\2\2\u00ae\u00a6\3\2\2\2\u00ae"+
		"\u00a7\3\2\2\2\u00af>\3\2\2\2\u00b0\u00b1\5=\37\2\u00b1\u00b5\t\7\2\2"+
		"\u00b2\u00b4\t\6\2\2\u00b3\u00b2\3\2\2\2\u00b4\u00b7\3\2\2\2\u00b5\u00b3"+
		"\3\2\2\2\u00b5\u00b6\3\2\2\2\u00b6\u00bf\3\2\2\2\u00b7\u00b5\3\2\2\2\u00b8"+
		"\u00ba\t\7\2\2\u00b9\u00bb\t\6\2\2\u00ba\u00b9\3\2\2\2\u00bb\u00bc\3\2"+
		"\2\2\u00bc\u00ba\3\2\2\2\u00bc\u00bd\3\2\2\2\u00bd\u00bf\3\2\2\2\u00be"+
		"\u00b0\3\2\2\2\u00be\u00b8\3\2\2\2\u00bf@\3\2\2\2\u00c0\u00c2\t\b\2\2"+
		"\u00c1\u00c0\3\2\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00c1\3\2\2\2\u00c3\u00c4"+
		"\3\2\2\2\u00c4\u00c5\3\2\2\2\u00c5\u00c6\b!\2\2\u00c6B\3\2\2\2\u00c7\u00c8"+
		"\7\61\2\2\u00c8\u00c9\7\61\2\2\u00c9\u00cd\3\2\2\2\u00ca\u00cc\n\t\2\2"+
		"\u00cb\u00ca\3\2\2\2\u00cc\u00cf\3\2\2\2\u00cd\u00cb\3\2\2\2\u00cd\u00ce"+
		"\3\2\2\2\u00ce\u00d0\3\2\2\2\u00cf\u00cd\3\2\2\2\u00d0\u00d1\b\"\2\2\u00d1"+
		"D\3\2\2\2\u00d2\u00d3\7\61\2\2\u00d3\u00d4\7,\2\2\u00d4\u00d8\3\2\2\2"+
		"\u00d5\u00d7\13\2\2\2\u00d6\u00d5\3\2\2\2\u00d7\u00da\3\2\2\2\u00d8\u00d9"+
		"\3\2\2\2\u00d8\u00d6\3\2\2\2\u00d9\u00db\3\2\2\2\u00da\u00d8\3\2\2\2\u00db"+
		"\u00dc\7,\2\2\u00dc\u00dd\7\61\2\2\u00dd\u00de\3\2\2\2\u00de\u00df\b#"+
		"\2\2\u00dfF\3\2\2\2\17\2\u0099\u009e\u00a1\u00a3\u00ab\u00ae\u00b5\u00bc"+
		"\u00be\u00c3\u00cd\u00d8\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}